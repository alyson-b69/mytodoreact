{"version":3,"sources":["components/NewTask.js","components/Task.js","components/Filter.js","components/Counter.js","containers/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["NewTask","onTodoAdd","useState","nouveauTodo","setNouveauTodo","onSubmit","event","preventDefault","id","Date","getTime","nom","done","className","value","onChange","currentTarget","type","placeholder","Task","details","onDelete","onToggle","checked","onClick","Filter","filters","currentFilter","onFilterChange","map","filter","key","Counter","todoCount","TodoApp","todos","setTodos","setFilter","handleDelete","todo","handleCheck","length","newF","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2b4fad9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst NewTask = ({ onTodoAdd }) => {\n\n  const [nouveauTodo, setNouveauTodo] = useState(\"\");\n\n  const handleChange = event => {\n    setNouveauTodo(event.currentTarget.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const id = new Date().getTime();\n    const nom = nouveauTodo;\n    const done = false;\n\n    onTodoAdd({ id, nom, done });\n\n    setNouveauTodo(\"\");\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit} className=\"taskForm\">\n      <input\n        value={nouveauTodo}\n        onChange={handleChange}\n        type=\"text\"\n        placeholder=\"Ajouter une todo\"\n        className=\"inputAdd\"\n      />\n      <button type=\"sumbit\" className=\"addingBtn\">\n        Ajouter\n      </button>\n    </form>\n  );\n};\n\n\n  export default NewTask;","import React from 'react';\n\nconst Task = ({ details, onDelete, onToggle }) => {\n\n\n    return (\n\n      <li className={`${details.done ? \"done\" : \"\"}`}>\n      <div className={`task ${details.done ? \"done\" : \"\"}`}>\n        <span className=\"taskCheckbox\">\n          <input\n           type=\"checkbox\"\n           checked={details.done}\n           onChange={() => { onToggle(details.id);}}\n        />\n        </span>\n        <span className=\"taskText\">{details.nom}</span>\n        <button className=\"deletingBtn\" onClick={() => onDelete(details.id)}>\n          X\n        </button>\n      </div>\n      </li>\n    );\n  }\n\n  export default Task;\n","import React from 'react';\n\nconst Filter = ({ filters, currentFilter, onFilterChange }) => {\n    return (\n      <div className=\"filters\">\n      {filters.map(filter => (\n        <button\n          key={filter}\n          onClick={() => {\n            onFilterChange(filter);\n          }}\n          className={`filter ${currentFilter === filter ? \"current\" : \"\"}`}\n        >\n          {filter}\n        </button>\n      ))}\n    </div>\n    );\n  }\n\n  export default Filter;","import React from \"react\";\n\nconst Counter = ({ todoCount }) => {\n  return (\n      <span className=\"taskCount\">\n        {todoCount === 0\n          ? \"All tasks are done\"\n          : todoCount === 1\n          ? \"1 tâche à faire\"\n          : `${todoCount} tâches à faire`}\n      </span>\n  );\n};\n\nexport default Counter;","import React, { useState } from 'react';\nimport NewTask from '../components/NewTask'\nimport Task from '../components/Task'\nimport Filter from '../components/Filter'\nimport Counter from '../components/Counter'\nimport './TodoApp.css'\n\nconst TodoApp = () => {\n\n  const [todos, setTodos] = useState([\n    { id: 1, nom: \"Apprendre React\", done: false },\n    { id: 2, nom: \"Créer TodoApp\", done: true },\n    { id: 3, nom: \"Prendre un café\", done: false }\n  ]);\n\n  const [filter, setFilter] = useState(\"Toutes\");\n\n  const handleDelete = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const handleAdd = todo => {\n    setTodos([...todos, todo]);\n  };\n\n  //check à revoir\n\n  const handleCheck = id => {\n    setTodos(\n      todos.map(todo => {\n        return todo.id === id ? { ...todo, done: !todo.done } : todo;\n      })\n    );\n  };\n\n  // Récupération via le click du nouvel etat de filter\n  const handleFilter = newF => {\n    setFilter(newF);\n  };\n\n  // Affichage rendus par les différents filtres\n  const getFilteredTasks = () => {\n    if (filter === \"à faire\") {\n      return todos.filter(todo => !todo.done);\n    } else if (filter === \"faites\") {\n      return todos.filter(todo => todo.done);\n    } else {\n      return todos;\n    }\n  };\n\n    return (\n      <div className=\"wrapper\">\n        <h1>MA TODOLIST</h1>\n        <div className=\"taskList\">\n        <NewTask onTodoAdd={handleAdd}/>\n        <ul>\n        {getFilteredTasks().map(todo => {\n            return (\n              <Task\n                key={todo.id}\n                details={todo}\n                onDelete={handleDelete}\n                onToggle={handleCheck}\n              />\n            );\n          })}\n        </ul>\n\n        </div>\n\n        <div className=\"footer\">\n        <Counter todoCount={todos.filter(todo => !todo.done).length}/>\n       \n        {/* ferme taskList */}\n        <Filter \n          currentFilter={filter}\n          filters={[\"Toutes\", \"faites\", \"à faire\"]}\n          onFilterChange={handleFilter}\n        />\n         </div> \n        </div>\n    );\n  }\n\n  export default TodoApp;\n\n","import React from 'react';\nimport './App.css';\nimport TodoApp from './containers/TodoApp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}